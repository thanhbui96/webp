// Copyright 2014 <chaishushan{AT}gmail.com>. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

//go:build ingore
// +build ingore

package main

import (
	"bufio"
	"bytes"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"
)

var (
	oldGenFiles = make(map[string]bool)
)

func main() {
	clearOldGenFiles()
	genIncludeFiles()
	printOldGenFiles()
}

func clearOldGenFiles() {
	ss, err := filepath.Glob("z_*.c")
	if err != nil {
		log.Fatal(err)
	}
	for i := 0; i < len(ss); i++ {
		os.Remove(ss[i])
		oldGenFiles[ss[i]] = true
	}
}

func genIncludeFiles() {
	wd, _ := os.Getwd()

	ss := parseCMakeListsTxt("internal/src/CMakeLists.txt", "WEBP_SRC", ".c")

	for i := 0; i < len(ss); i++ {
		ss[i], _ = filepath.Abs(ss[i])
		ss[i], _ = filepath.Rel(wd, ss[i])
		fmt.Println(ss[i])
	}
	for i := 0; i < len(ss); i++ {
		relpath := ss[i]

		newname := relpath
		newname = strings.TrimPrefix(newname, "internal/")
		newname = strings.TrimSuffix(newname, ".c")
		newname = strings.Replace(newname, "libwebp-1.2.2", "libwebp", -1)
		newname = strings.Replace(newname, "/", "_", -1)
		newname = strings.Replace(newname, ".", "_", -1)
		newname = "z_" + newname + ".c"

		ioutil.WriteFile(newname, []byte(fmt.Sprintf(
			`// Copyright 2022 <chaishushan{AT}gmail.com>. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Auto Generated By 'go generate', DONOT EDIT!!!

// +build cgo

#include "./%s"
`, relpath,
		)), 0666)

		delete(oldGenFiles, newname)
	}
}

func printOldGenFiles() {
	if len(oldGenFiles) == 0 {
		return
	}
	fmt.Printf("Removed Files:\n")
	for k, _ := range oldGenFiles {
		fmt.Printf("%s\n", k)
	}
	fmt.Printf("Total %d\n", len(oldGenFiles))
}

func parseCMakeListsTxt(filename, varname, ext string) (ss []string) {
	cmakefileDir := filepath.Dir(filename)

	data, err := ioutil.ReadFile(filename)
	if err != nil {
		log.Fatal(err)
	}
	br := bufio.NewReader(bytes.NewReader(data))

	// find set($varname
	for {
		line, _, err := br.ReadLine()
		if err != nil {
			log.Fatal(err)
		}
		if strings.HasPrefix(string(line), "set("+varname) {
			break
		}
	}

	// read $varname, end with `)`
	for {
		line, _, err := br.ReadLine()
		if err != nil {
			log.Fatal(err)
		}
		if strings.HasPrefix(string(line), ")") {
			break
		}
		switch v := strings.TrimSpace(string(line)); {
		case strings.HasPrefix(v, `${`): // parse ${?}
			ss = append(ss, parseCMakeListsTxt(filename, v[2:len(v)-3], ext)...)
		case strings.HasSuffix(v, ext): // *.ext
			ss = append(ss, filepath.Join(cmakefileDir, v))
		}
	}
	return
}
